services:
  # FastAPI Application
  app:
    build:
      context: .
      target: development
    container_name: stockholm_bus_app
    volumes:
      - .:/app
      - /app/__pycache__
    environment:
      - ENVIRONMENT=development
      - CORS_ORIGINS=http://localhost,http://localhost:8080,http://127.0.0.1:8080
      - 'SL_API_CONFIG={"site_id": "1285", "bus_line": "1", "max_departures": 2, "refresh_interval": 30}'
    networks:
      - bus_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: stockholm_bus_nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./static:/usr/share/nginx/html/static:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      app:
        condition: service_healthy
    networks:
      - bus_network
    restart: unless-stopped

  # Redis for WebSocket session management (optional)
  redis:
    image: redis:7-alpine
    container_name: stockholm_bus_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bus_network
    restart: unless-stopped
    command: redis-server --appendonly yes

networks:
  bus_network:
    driver: bridge

volumes:
  redis_data:
    driver: local
