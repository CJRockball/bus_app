version: '3.8'

services:
  app:
    build:
      context: .
      target: production
    container_name: stockholm_bus_app_prod
    environment:
      - ENVIRONMENT=production
      - CORS_ORIGINS=${CORS_ORIGINS}
      - SL_API_CONFIG=${SL_API_CONFIG}
    networks:
      - bus_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  nginx:
    image: nginx:1.25-alpine
    container_name: stockholm_bus_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./static:/usr/share/nginx/html/static:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - certbot_webroot:/var/www/certbot:ro
      - certbot_certs:/etc/letsencrypt:ro
    depends_on:
      app:
        condition: service_healthy
    networks:
      - bus_network
    restart: unless-stopped

  # Let's Encrypt certificate generation
  certbot:
    image: certbot/certbot
    container_name: stockholm_bus_certbot
    volumes:
      - certbot_webroot:/var/www/certbot
      - certbot_certs:/etc/letsencrypt
    command: >
      sh -c 'trap "exit" TERM; while :; do certbot renew --webroot --webroot-path=/var/www/certbot --quiet; sleep 12h & wait $$!; done'

networks:
  bus_network:
    driver: bridge

volumes:
  certbot_webroot:
  certbot_certs:
